package org.example;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.*;

public class ClientNode {
    private static final Logger logger = LogManager.getLogger(ClientNode.class);

    private final String clientId; // c: self client_id
    private Map<String, ServerDetails> servers; // [servers]: Map of all server ids and their connection info
    private String leaderId; // leader: Current leader id
    private final StubManager stubManager;
    private final ExecutorService networkExecutor;

    public ClientNode(String clientId) {
        this.clientId = clientId;
        this.servers = new HashMap<>();
        this.leaderId = "n1";


        try {
            this.servers = Config.getServers();
            this.stubManager = new StubManager();
            this.networkExecutor = Executors.newCachedThreadPool(); // Thread pool for handling network operations
        } catch (Exception e) {
//            logger.error("Client {}: Failed to load server details from path defined in config.properties : {}", clientId, e.getMessage());
            throw new RuntimeException(e);
        }
    }

    /**
     * Generates a ClientRequest proto message.
     *
     * @param transaction The transaction object (from the class generated by grpc)
     * @return ClientRequest proto message
     */
    private MessageServiceOuterClass.ClientRequest generateClientRequest(MessageServiceOuterClass.Transaction transaction) {
        long timestamp = System.currentTimeMillis();
        return MessageServiceOuterClass.ClientRequest.newBuilder().setTransaction(transaction).setTimestamp(timestamp).setClientId(transaction.getSender()).build();
    }

    public void processTransaction(MessageServiceOuterClass.Transaction transaction) {
        MessageServiceOuterClass.ClientRequest clientRequest = generateClientRequest(transaction);
    }

}